#!/usr/bin/env bash
#
# [Release]: SnoopGod 24.04.2 LTS amd64
# [Website]: https://snoopgod.com/releases/?ver=24.04.2
# [License]: http://www.gnu.org/licenses/gpl-3.0.html

## ---------------- ##
## DEFINE VARIABLES ##
## ---------------- ##

## Colour Output
## -------------
texterror="\033[01;31m"     # Text Error
textvalid="\033[01;32m"     # Text Success
textalert="\033[01;33m"     # Text Warnings/Information
textlabel="\033[01;34m"     # Text Heading
textreset="\033[00m"        # Text Reset

## Packaging
## ---------
package="NodeHandler"
version="v2.0.1"
website="neoslab.com"

## Debug
## -----
debug_mode=true
debug_logs="nodehandler.log"

## Nodes
## -----
nodes=( bitping getgrass mystnode packetstream repocket traffmonetizer )

## ---------------- ##
## DEFINE FUNCTIONS ##
## ---------------- ##

## Load Status
## -----------
function loadstatus()
{
    texterror=$(tput setaf 1)
    textvalid=$(tput setaf 2)
    textalert=$(tput setaf 3)
    textlabel=$(tput setaf 4)
    textreset=$(tput sgr0)

    message=$1
    display="[$2]"

    if [ "$3" == "issue" ];
    then
        return="$texterror${display}$textreset"
    elif [ "$3" == "valid" ];
    then
        return="$textvalid${display}$textreset"
    elif [ "$3" == "warning" ];
    then
        return="$textalert${display}$textreset"
    elif [ "$3" == "info" ];
    then
        return="$textalert${display}$textreset"
    else
        return="$textreset${display}$textreset"
    fi

    let COL=$(tput cols)-${#message}+${#return}-${#display}

    echo -n $message
    printf "%${COL}s\n"  "$return"
}

## Write Logs
## ----------
function writelogs()
{
    local level="[DEBUG]"
    local message=""

    while [[ "$#" -gt 0 ]];
    do
        case "$1" in
            -l|--level)
                log_level="$2"
                shift 2
                ;;
            -m|--message)
                message="$2"
                shift 2
                ;;
            *)
                echo "Unknown parameter passed: $1"
                exit 1
                ;;
        esac
    done

    # Only log if DEBUG mode is enabled
    if [[ "$debug_mode" == "true" ]];
    then
        echo "$(date +'%Y-%m-%d %H:%M:%S') - $level - $message" >> "$debug_logs"
    fi
}

## Check Architecture
## ------------------
function checkarchitecture()
{
    writelogs -l "[DEBUG]" -m "Detecting system architecture..."
    if ! command -v uname -m &> /dev/null;
    then
        writelogs -l "[DEBUG]" -m "uname command not found, architecture detection failed - Architecture will be set to 'unknown'"
        archstr="unknown"
    else
        archstr=$(uname -m | tr '[:upper:]' '[:lower:]')
        loadstatus "[+] System architecture detected: ${archstr}" "OK" "valid"
    fi

    writelogs -l "[DEBUG]" -m "System architecture detected: ${archstr}"
    sleep 1s
}

## Check Dependencies
## ------------------
function checkdependencies()
{
    if ! command -v jq &> /dev/null;
    then
        loadstatus "[+] JQ is not present" "!!" "issue"
        echo -e "${texterror}[!]${textreset} You must run 'sudo apt -y install jq' to install the missing package"
        echo -e "${texterror}[!]${textreset} Quitting ..."
        echo
    else
        loadstatus "[+] Dependencies check completed" "OK" "valid"
    fi

    writelogs -l "[DEBUG]" -m "Dependencies check completed"
    sleep 1s
}

## Bitping Docker
## --------------
function dockerbitping()
{
    container="bitping"
    if docker inspect "$container" > /dev/null 2>&1;
    then
        loadstatus "[+] The container ${container} exists" "OK" "valid"
        writelogs -l "[DEBUG]" -m "The container ${container} exists"
        sleep 1s

        if $(docker inspect -f '{{.State.Status}}' "$container" | grep -q "running");
        then
            loadstatus "[+] The container ${container} is running" "OK" "valid"
            writelogs -l "[DEBUG]" -m "The container ${container} is running"
            sleep 1s
        else
            docker start "$container" > /dev/null 2>&1
            loadstatus "[+] Starting ${container} container" "OK" "valid"
            writelogs -l "[DEBUG]" -m "Starting ${container} container"
            sleep 1s
        fi
    else
        docker run -it --mount type=volume,source="bitpingd-volume",target=/root/.bitpingd --entrypoint /app/bitpingd bitping/bitpingd:latest login --email "nodehandler@snoopgod.com" --password "P+JS3=xibGrh+ntLb.y7M86]r" > /dev/null 2>&1
        docker run -d --restart="always" --name "bitping" -it --mount type=volume,source="bitpingd-volume",target=/root/.bitpingd bitping/bitpingd:latest > /dev/null 2>&1
        loadstatus "[+] Installing ${container} container" "OK" "valid"
        writelogs -l "[DEBUG]" -m "Starting ${container} container"
        sleep 1s
    fi
}

## GetGrass Docker
## ---------------
function dockergetgrass()
{
    container="getgrass"
    if docker inspect "$container" > /dev/null 2>&1;
    then
        loadstatus "[+] The container ${container} exists" "OK" "valid"
        writelogs -l "[DEBUG]" -m "The container ${container} exists"
        sleep 1s

        if $(docker inspect -f '{{.State.Status}}' "$container" | grep -q "running");
        then
            loadstatus "[+] The container ${container} is running" "OK" "valid"
            writelogs -l "[DEBUG]" -m "The container ${container} is running"
            sleep 1s
        else
            docker start "$container" > /dev/null 2>&1
            loadstatus "[+] Starting ${container} container" "OK" "valid"
            writelogs -l "[DEBUG]" -m "Starting ${container} container"
            sleep 1s
        fi
    else
        docker run -d --restart="always" --name "getgrass" -h "neoslab" -e USER_EMAIL="nodehandler@snoopgod.com" -e USER_PASSWORD="7mE=6ftZqz7HTs[E]Ot@Vs/L|" -p 8080:8080 "neoslab/getgrass" > /dev/null 2>&1
        loadstatus "[+] Installing ${container} container" "OK" "valid"
        writelogs -l "[DEBUG]" -m "Starting ${container} container"
        sleep 1s
    fi
}

## MystNode Docker
## ---------------
function dockermystnode()
{
    container="mystnode"
    if docker inspect "$container" > /dev/null 2>&1;
    then
        loadstatus "[+] The container ${container} exists" "OK" "valid"
        writelogs -l "[DEBUG]" -m "The container ${container} exists"
        sleep 1s

        if $(docker inspect -f '{{.State.Status}}' "$container" | grep -q "running");
        then
            loadstatus "[+] The container ${container} is running" "OK" "valid"
            writelogs -l "[DEBUG]" -m "The container ${container} is running"
            sleep 1s
        else
            docker start "$container" > /dev/null 2>&1
            loadstatus "[+] Starting ${container} container" "OK" "valid"
            writelogs -l "[DEBUG]" -m "Starting ${container} container"
            sleep 1s
        fi
    else
        docker pull mysteriumnetwork/myst > /dev/null 2>&1
        docker run --name "mystnode" --cap-add NET_ADMIN -d -p 4449:4449 -v myst-data:/var/lib/mysterium-node --restart unless-stopped mysteriumnetwork/myst:latest service --agreed-terms-and-conditions > /dev/null 2>&1
        loadstatus "[+] Installing ${container} container" "OK" "valid"
        writelogs -l "[DEBUG]" -m "Starting ${container} container"
        sleep 1s
    fi
}

## PacketStream Docker
## -------------------
function dockerpacketstream()
{
    container="packetstream"
    if docker inspect "$container" > /dev/null 2>&1;
    then
        loadstatus "[+] The container ${container} exists" "OK" "valid"
        writelogs -l "[DEBUG]" -m "The container ${container} exists"
        sleep 1s

        if $(docker inspect -f '{{.State.Status}}' "$container" | grep -q "running");
        then
            loadstatus "[+] The container ${container} is running" "OK" "valid"
            writelogs -l "[DEBUG]" -m "The container ${container} is running"
            sleep 1s
        else
            docker start "$container" > /dev/null 2>&1
            loadstatus "[+] Starting ${container} container" "OK" "valid"
            writelogs -l "[DEBUG]" -m "Starting ${container} container"
            sleep 1s
        fi
    else
        docker run -d --restart="always" -e CID="6USi" --name "packetstream" packetstream/psclient:latest > /dev/null 2>&1
        docker run -d --restart="always" --name "watchtower-psclient" -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower --cleanup --include-stopped --include-restarting --revive-stopped --interval 60 "packetstream" > /dev/null 2>&1
        loadstatus "[+] Installing ${container} container" "OK" "valid"
        writelogs -l "[DEBUG]" -m "Starting ${container} container"
        sleep 1s
    fi
}

## Repocket Docker
## ---------------
function dockerrepocket()
{
    container="repocket"
    if docker inspect "$container" > /dev/null 2>&1;
    then
        loadstatus "[+] The container ${container} exists" "OK" "valid"
        writelogs -l "[DEBUG]" -m "The container ${container} exists"
        sleep 1s

        if $(docker inspect -f '{{.State.Status}}' "$container" | grep -q "running");
        then
            loadstatus "[+] The container ${container} is running" "OK" "valid"
            writelogs -l "[DEBUG]" -m "The container ${container} is running"
            sleep 1s
        else
            docker start "$container" > /dev/null 2>&1
            loadstatus "[+] Starting ${container} container" "OK" "valid"
            writelogs -l "[DEBUG]" -m "Starting ${container} container"
            sleep 1s
        fi
    else
        docker run -d --restart="always" --name "repocket" -e RP_EMAIL="nodehandler@snoopgod.com" -e RP_API_KEY="57bb6cf8-041e-4dc2-9da3-3f25553a8b03" repocket/repocket > /dev/null 2>&1
        loadstatus "[+] Installing ${container} container" "OK" "valid"
        writelogs -l "[DEBUG]" -m "Starting ${container} container"
        sleep 1s
    fi
}

## Traffmonetizer Docker
## ---------------------
function dockertraffmonetizer()
{
    randomgen=$(cat /proc/sys/kernel/random/uuid | sed 's/[-]//g' | head -c 20)
    container="traffmonetizer"
    if docker inspect "$container" > /dev/null 2>&1;
    then
        loadstatus "[+] The container ${container} exists" "OK" "valid"
        writelogs -l "[DEBUG]" -m "The container ${container} exists"
        sleep 1s

        if $(docker inspect -f '{{.State.Status}}' "$container" | grep -q "running");
        then
            loadstatus "[+] The container ${container} is running" "OK" "valid"
            writelogs -l "[DEBUG]" -m "The container ${container} is running"
            sleep 1s
        else
            docker start "$container" > /dev/null 2>&1
            loadstatus "[+] Starting ${container} container" "OK" "valid"
            writelogs -l "[DEBUG]" -m "Starting ${container} container"
            sleep 1s
        fi
    else
        docker run -i -d --restart="always" --name "traffmonetizer" traffmonetizer/cli_v2 start accept --token "ESIJduzNUhhbCD7SvYPjQNs5F3MTTtzcNFFy2bRjcPY=" --device-name "${randomgen}" > /dev/null 2>&1
        loadstatus "[+] Installing ${container} container" "OK" "valid"
        writelogs -l "[DEBUG]" -m "Starting ${container} container"
        sleep 1s
    fi
}

## Pawns CLI
## ---------
function pawnscli()
{
    service="pawns-cli"
    if pgrep -x "$service" >/dev/null
    then
        loadstatus "[+] The process ${service} is running" "OK" "valid"
        writelogs -l "[DEBUG]" -m "The process ${service} is running"
        sleep 1s
    else
        nohup ./pawns-cli -email="nodehandler@snoopgod.com" -password="0=4_AG.+$.&d..eCtK@z~;m1~" -device-name="667610d05b17880011d02bf3" -accept-tos > $debug_logs 2>&1 &
        loadstatus "[+] Starting ${service} process" "OK" "valid"
        writelogs -l "[DEBUG]" -m "Starting ${service} process"
        sleep 1s
    fi
}

## Show Version
## ------------
function version()
{
    echo
    echo -e "[Package]: ${package}"
    echo -e "[Version]: ${version}"
    echo -e "[Website]: ${website}"
}

## Help Menu
## ---------
function helpmenu()
{
    echo 
    echo "Usage: coin4band [-h|--help] [--start] [--stop]"
    echo
    echo "Options:"
    echo " -h, --help           show this help"
    echo " --start              start NodeHandler"
    echo " --stop               stop NodeHandler"
    echo " --clean              clean NodeHandler"
}

## Callback
## --------
while test $# -gt 0;
do
    case "$1" in
        -h|--help)
            helpmenu
            exit 1
            ;;
        --start)
            writelogs -l "[INFO]" -m "Start ${package} ${version}"
            checkarchitecture
            checkdependencies
            echo "---"
            while true;
            do
                dockerbitping
                dockergetgrass
                #dockermystnode
                dockerpacketstream
                dockerrepocket
                dockertraffmonetizer
                pawnscli
                
                sleep 30s
                echo "---"
            done
            exit 1
            ;;
        --stop)
            writelogs -l "[INFO]" -m "Stop ${package} ${version}"
            loadstatus "[+] Stop ${package} ${version}" "OK" "valid"
            docker stop $(docker ps -aq) > /dev/null 2>&1
                        
            for node in "${nodes[@]}"
            do
                writelogs -l "[DEBUG]" -m "Stopping ${node} container"
                loadstatus "[+] Stopping ${node} container" "OK" "valid"
                sleep 1s
            done
            exit 1
            ;;
        --clean)
            writelogs -l "[INFO]" -m "Clean ${package} ${version}"
            loadstatus "[+] Clean ${package} ${version}" "OK" "valid"
            docker rm $(docker ps -aq) > /dev/null 2>&1
            docker rmi $(docker images -q) -f > /dev/null 2>&1
            docker system prune --volumes -a -f > /dev/null 2>&1

            for node in "${nodes[@]}"
            do
                writelogs -l "[DEBUG]" -m "Cleaning ${node} container"
                loadstatus "[+] Cleaning ${node} container" "OK" "valid"
                sleep 1s
            done
            exit 1
            ;;
        --version)
            version
            exit 1
            ;;
        *)
            helpmenu
            exit 1
            ;;
    esac
done

## Check Argument
## --------------
if [ $# -eq 0 ]
then
    helpmenu
fi
