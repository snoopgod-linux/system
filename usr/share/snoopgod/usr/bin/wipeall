#!/usr/bin/env bash
#
# [Release]: SnoopGod 22.04.3 LTS amd64
# [Website]: https://snoopgod.com/releases/?ver=22.04.3
# [License]: http://www.gnu.org/licenses/gpl-3.0.html

## ---------------- ##
## DEFINE VARIABLES ##
## ---------------- ##

## Colour output
## -------------
texterror="\033[01;31m"		# Error
textreset="\033[00m"		# Reset

## ------------------- ##
## PREPARE ENVIRONMENT ##
## ------------------- ##

## Clear screen
## ------------
function clearscreen()
{
	clear
	sleep 2s
}

## Keep alive
## ----------
function keepalive()
{
	sudo -v
	while true;
	do
		sudo -n true;
		sleep 60s;
		kill -0 "$$" || exit;
	done 2>/dev/null &
}

## Warning
## -------
function showwarning()
{
	echo
    echo -e "${texterror}*** Warning ***${textreset}"
    echo -e "${texterror}You are about to wipe and remove all root obsolete files${textreset}"
    echo -e "${texterror}We recommend to exit all other programs before to proceed${textreset}"
    echo
    read -p "Do you want to continue? [y/N] " yn
    case $yn in
        [Yy]* )
			echo
            ;;
        [Nn]* )
            exit
            ;;
        * )
            exit
            ;;
    esac
}

## Secure delete
## -------------
function securedelete()
{
    path=$1
	if [ -d "$path" ];
	then
		srm -f -r -v $path >/dev/null 2>&1
	elif [ -f "$path" ];
	then
		srm -f -v $path >/dev/null 2>&1
	fi
}

## -------------- ##
## DEFINE ACTIONS ##
## -------------- ##

## Delete cache thumbnails
## -----------------------
function deletecachethumbs()
{
    read -p "[?] Do you want to delete user cache thumbnails directory? [y/N] " yn
    case $yn in
        [Yy]* )
			rm -rf $HOME/.cache/thumbnails/*
			echo -e "[+] User cache thumbnails directory deleted\n"
            ;;
        [Nn]* )
			echo -e "[!] User cache thumbnails directory not deleted\n"
            ;;
        * )
            deletecachethumbs
            ;;
    esac
}

## Delete files history
## --------------------
function deletefileshistory()
{
    read -p "[?] Do you want to delete files history? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete "$HOME/.local/share/recently-used.xbel"
			securedelete "$HOME/.config/sublime-text/Local/Session.sublime_session"
			securedelete "$HOME/.msf4/history"
			echo -e "[+] Files history deleted\n"
            ;;
        [Nn]* )
			echo -e "[!] Files history not deleted\n"
            ;;
        * )
            deletefileshistory
            ;;
    esac
}

## Delete SSH keys
## ---------------
function deletesshkeys()
{
    read -p "[?] Do you want to delete SSH keys? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.ssh/authorized_keys
			securedelete $HOME/.ssh/known_hosts
			securedelete $HOME/.ssh/known_hosts.old
			echo -e "[+] SSH keys deleted\n"
            ;;
        [Nn]* )
			echo -e "[!] SSH keys not deleted\n"
            ;;
        * )
            deletesshkeys
            ;;
    esac
}

## Delete Wget history
## -------------------
function deletewgets()
{
    read -p "[?] Do you want to delete the Wget history? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.wget-hsts
			echo -e "[+] Wget history deleted\n"
		    ;;
        [Nn]* )
			echo -e "[!] Wget history not deleted\n"
            ;;
        * )
            deletewgets
            ;;
    esac
}

## Delete Xsession errors
## ----------------------
function deletexerrors()
{
    read -p "[?] Do you want to delete the X-session errors? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete $HOME/.xsession-errors
			echo -e "[+] X-Session errors deleted\n"
		    ;;
        [Nn]* )
			echo -e "[!] X-Session errors not deleted\n"
            ;;
        * )
            deletexerrors
            ;;
    esac
}

## Delete useless documentations
## -----------------------------
function deleteuselessdocs()
{
    read -p "[?] Do you want to delete unnecessary documentations? [y/N] " yn
    case $yn in
        [Yy]* )
			array=( man groff info lintian linda )
			for item in "${array[@]}"
			do
				securedelete /usr/share/$item
				echo -e "[+] Documentation file /usr/share/$item deleted"
			done

			securedelete /var/cache/man
			echo -e "[+] Documentation directory /var/cache/man deleted"

			sudo find /usr/share/doc -depth -type f ! -name copyright -exec rm -rf {} \; >/dev/null 2>&1
			sudo find /usr/share/doc -empty -exec rm -rf {} \; >/dev/null 2>&1
			echo -e "[+] Documentation directory /usr/share/doc deleted"

			sudo find /usr/share/locale -mindepth 1 -maxdepth 1 ! -name 'en' -exec rm -rf {} \; >/dev/null 2>&1
			echo -e "[+] Documentation directory /usr/share/locale deleted\n"
            ;;
        [Nn]* )
			echo -e "[!] Unnecessary documentations not deleted\n"
            ;;
        * )
            deleteuselessdocs
            ;;
    esac
}

## Delete APT cache
## ----------------
function deleteaptcache()
{
    read -p "[?] Do you want to delete APT cache? [y/N] " yn
    case $yn in
        [Yy]* )
			securedelete /var/cache/apt/*
			echo -e "[+] APT cache deleted\n"
            ;;
        [Nn]* )
			echo -e "[!] APT cache not deleted\n"
            ;;
        * )
            deleteaptcache
            ;;
    esac
}

## Clear `/var/log` recursively
## ----------------------------
function deletevarlog()
{
    read -p "[?] Do you want to delete the system logs? [y/N] " yn
    case $yn in
        [Yy]* )
			array=( *.gz *.journal *.old *.1 *.log )
			for item in "${array[@]}"
			do
				sudo find /var/log/ -type f -name $item -exec rm -f {} \; >/dev/null 2>&1
				echo -e "[+] System logs /var/log/$item deleted"
			done

			array=( btmp debug faillog lastlog messages syslog wtmp cups/access_log installer/debug installer/media-info installer/partman installer/syslog installer/telemetry installer/version )
			for item in "${array[@]}"
			do
				securedelete /var/log/$item
				sudo touch /var/log/$item
				echo -e "[+] System logs /var/log/$item deleted"
			done
			echo 
            ;;
        [Nn]* )
			echo -e "[!] System logs not deleted\n"
            ;;
        * )
            deletevarlog
            ;;
    esac
}

## Remove unwanted launchers
## -------------------------
function removelaunchers()
{
	sudo rm -rf /usr/share/applications/kde4
	sudo rm -f /usr/share/applications/arduino.desktop
	sudo rm -f /usr/share/applications/edb.desktop
	sudo rm -f /usr/share/applications/ettercap.desktop
	sudo rm -f /usr/share/applications/gtkhash.desktop
	sudo rm -f /usr/share/applications/guymager.desktop
	sudo rm -f /usr/share/applications/lstopo.desktop
	sudo rm -f /usr/share/applications/lynis.desktop
	sudo rm -f /usr/share/applications/ophcrack.desktop
	sudo rm -f /usr/share/applications/org.kde.plasma.emojier.desktop
	sudo rm -f /usr/share/applications/org.wireshark.Wireshark.desktop
	sudo rm -f /usr/share/applications/texdoctk.desktop
	sudo rm -f /usr/share/applications/ubiquity.desktop
	sudo rm -f /usr/share/applications/*-BurpSuiteCommunity.desktop
	sudo rm -f /usr/share/applications/*-zap.sh.desktop
}

## Terminate
## ---------
function terminate()
{
	echo "Process completed"
	sleep 1s
}

## -------------- ##
## EXECUTE SCRIPT ##
## -------------- ##

## Launch
## ------
function launch()
{
    # Retrieve current datetime
	flushtime=`date +%s.%N`

	# Prepare Environment
	clearscreen
	keepalive
	showwarning
	
	# Execute Actions
	deletecachethumbs
	deletefileshistory
	deletesshkeys
	deletewgets
	deletexerrors
	deleteuselessdocs
	deleteaptcache
	deletevarlog
	removelaunchers
	
	# Terminate
	terminate

	# Return notice
	endtime=`date +%s.%N`
	runtime=$( echo "$endtime - $flushtime" | bc -l )
	echo "Executed within ${runtime} seconds"
}

## -------- ##
## CALLBACK ##
## -------- ##

launch
